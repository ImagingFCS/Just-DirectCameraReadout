/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK */

#ifndef _Included_directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK
#define _Included_directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK
#ifdef __cplusplus
extern "C" {
#endif
#undef directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK_impwinposx
#define directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK_impwinposx 1110L
#undef directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK_impwinposy
#define directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK_impwinposy 125L
/*
 * Class:     directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK
 * Method:    seyHello
 * Signature: (II)F
 */
JNIEXPORT jfloat JNICALL Java_directCameraReadout_pvcamsdk_Photometrics_1PVCAM_1SDK_seyHello
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK
 * Method:    sayHello
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_directCameraReadout_pvcamsdk_Photometrics_1PVCAM_1SDK_sayHello
  (JNIEnv *, jobject);

/*
 * Class:     directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK
 * Method:    isPHOTOMETRICSconnectedPVCAM
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_directCameraReadout_pvcamsdk_Photometrics_1PVCAM_1SDK_isPHOTOMETRICSconnectedPVCAM
  (JNIEnv *, jclass);

/*
 * Class:     directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK
 * Method:    GetModelPVCAM
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_directCameraReadout_pvcamsdk_Photometrics_1PVCAM_1SDK_GetModelPVCAM
  (JNIEnv *, jclass);

/*
 * Class:     directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK
 * Method:    GetCameraNamePVCAM
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_directCameraReadout_pvcamsdk_Photometrics_1PVCAM_1SDK_GetCameraNamePVCAM
  (JNIEnv *, jclass);

/*
 * Class:     directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK
 * Method:    InitializePVCAM
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_directCameraReadout_pvcamsdk_Photometrics_1PVCAM_1SDK_InitializePVCAM
  (JNIEnv *, jclass);

/*
 * Class:     directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK
 * Method:    SystemShutDownPVCAM
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_directCameraReadout_pvcamsdk_Photometrics_1PVCAM_1SDK_SystemShutDownPVCAM
  (JNIEnv *, jclass);

/*
 * Class:     directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK
 * Method:    GetDetectorDimPVCAM
 * Signature: ()[I
 */
JNIEXPORT jintArray JNICALL Java_directCameraReadout_pvcamsdk_Photometrics_1PVCAM_1SDK_GetDetectorDimPVCAM
  (JNIEnv *, jclass);

/*
 * Class:     directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK
 * Method:    setParameterPVCAM
 * Signature: (DIIIIIIIII)I
 */
JNIEXPORT jint JNICALL Java_directCameraReadout_pvcamsdk_Photometrics_1PVCAM_1SDK_setParameterPVCAM
  (JNIEnv *, jclass, jdouble, jint, jint, jint, jint, jint, jint, jint, jint, jint);

/*
 * Class:     directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK
 * Method:    getKineticCyclePVCAM
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_directCameraReadout_pvcamsdk_Photometrics_1PVCAM_1SDK_getKineticCyclePVCAM
  (JNIEnv *, jclass);

/*
 * Class:     directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK
 * Method:    runSingleScanPVCAM
 * Signature: ()[S
 */
JNIEXPORT jshortArray JNICALL Java_directCameraReadout_pvcamsdk_Photometrics_1PVCAM_1SDK_runSingleScanPVCAM
  (JNIEnv *, jclass);

/*
 * Class:     directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK
 * Method:    runInfiniteLoopPVCAM
 * Signature: ([SLdirectCameraReadout/control/FrameCounter;)V
 */
JNIEXPORT void JNICALL Java_directCameraReadout_pvcamsdk_Photometrics_1PVCAM_1SDK_runInfiniteLoopPVCAM
  (JNIEnv *, jclass, jshortArray, jobject);

/*
 * Class:     directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK
 * Method:    setStopMechanismPVCAM
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_directCameraReadout_pvcamsdk_Photometrics_1PVCAM_1SDK_setStopMechanismPVCAM
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK
 * Method:    debugMyData1PVCAM
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_directCameraReadout_pvcamsdk_Photometrics_1PVCAM_1SDK_debugMyData1PVCAM
  (JNIEnv *, jclass);

/*
 * Class:     directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK
 * Method:    debugMyData2PVCAM
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_directCameraReadout_pvcamsdk_Photometrics_1PVCAM_1SDK_debugMyData2PVCAM
  (JNIEnv *, jclass);

/*
 * Class:     directCameraReadout_pvcamsdk_Photometrics_PVCAM_SDK
 * Method:    getDoubleValuePVCAM
 * Signature: (Ljava/lang/String;)D
 */
JNIEXPORT jdouble JNICALL Java_directCameraReadout_pvcamsdk_Photometrics_1PVCAM_1SDK_getDoubleValuePVCAM
  (JNIEnv *, jclass, jstring);

#ifdef __cplusplus
}
#endif
#endif
